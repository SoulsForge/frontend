/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as UsernameImport } from './routes/$username'
import { Route as IndexImport } from './routes/index'
import { Route as CharacterIdImport } from './routes/character/$id'
import { Route as AuthenticatedSlidersImport } from './routes/_authenticated/sliders'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedCreateImport } from './routes/_authenticated/create'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLogoutImport } from './routes/(auth)/logout'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as AuthenticatedCharacterIdEditImport } from './routes/_authenticated/character/$id/edit'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const UsernameRoute = UsernameImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CharacterIdRoute = CharacterIdImport.update({
  id: '/character/$id',
  path: '/character/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedSlidersRoute = AuthenticatedSlidersImport.update({
  id: '/sliders',
  path: '/sliders',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedCreateRoute = AuthenticatedCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLogoutRoute = authLogoutImport.update({
  id: '/(auth)/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedCharacterIdEditRoute =
  AuthenticatedCharacterIdEditImport.update({
    id: '/character/$id/edit',
    path: '/character/$id/edit',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/logout': {
      id: '/(auth)/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authLogoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/create': {
      id: '/_authenticated/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof AuthenticatedCreateImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/sliders': {
      id: '/_authenticated/sliders'
      path: '/sliders'
      fullPath: '/sliders'
      preLoaderRoute: typeof AuthenticatedSlidersImport
      parentRoute: typeof AuthenticatedImport
    }
    '/character/$id': {
      id: '/character/$id'
      path: '/character/$id'
      fullPath: '/character/$id'
      preLoaderRoute: typeof CharacterIdImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/character/$id/edit': {
      id: '/_authenticated/character/$id/edit'
      path: '/character/$id/edit'
      fullPath: '/character/$id/edit'
      preLoaderRoute: typeof AuthenticatedCharacterIdEditImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedCreateRoute: typeof AuthenticatedCreateRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedSlidersRoute: typeof AuthenticatedSlidersRoute
  AuthenticatedCharacterIdEditRoute: typeof AuthenticatedCharacterIdEditRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCreateRoute: AuthenticatedCreateRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedSlidersRoute: AuthenticatedSlidersRoute,
  AuthenticatedCharacterIdEditRoute: AuthenticatedCharacterIdEditRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRoute
  '': typeof LayoutRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/register': typeof authRegisterRoute
  '/create': typeof AuthenticatedCreateRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/sliders': typeof AuthenticatedSlidersRoute
  '/character/$id': typeof CharacterIdRoute
  '/character/$id/edit': typeof AuthenticatedCharacterIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRoute
  '': typeof LayoutRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/register': typeof authRegisterRoute
  '/create': typeof AuthenticatedCreateRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/sliders': typeof AuthenticatedSlidersRoute
  '/character/$id': typeof CharacterIdRoute
  '/character/$id/edit': typeof AuthenticatedCharacterIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$username': typeof UsernameRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_layout': typeof LayoutRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/logout': typeof authLogoutRoute
  '/(auth)/register': typeof authRegisterRoute
  '/_authenticated/create': typeof AuthenticatedCreateRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/sliders': typeof AuthenticatedSlidersRoute
  '/character/$id': typeof CharacterIdRoute
  '/_authenticated/character/$id/edit': typeof AuthenticatedCharacterIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$username'
    | ''
    | '/about'
    | '/search'
    | '/login'
    | '/logout'
    | '/register'
    | '/create'
    | '/settings'
    | '/sliders'
    | '/character/$id'
    | '/character/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$username'
    | ''
    | '/about'
    | '/search'
    | '/login'
    | '/logout'
    | '/register'
    | '/create'
    | '/settings'
    | '/sliders'
    | '/character/$id'
    | '/character/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/$username'
    | '/_authenticated'
    | '/_layout'
    | '/about'
    | '/search'
    | '/(auth)/login'
    | '/(auth)/logout'
    | '/(auth)/register'
    | '/_authenticated/create'
    | '/_authenticated/settings'
    | '/_authenticated/sliders'
    | '/character/$id'
    | '/_authenticated/character/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsernameRoute: typeof UsernameRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LayoutRoute: typeof LayoutRoute
  AboutRoute: typeof AboutRoute
  SearchRoute: typeof SearchRoute
  authLoginRoute: typeof authLoginRoute
  authLogoutRoute: typeof authLogoutRoute
  authRegisterRoute: typeof authRegisterRoute
  CharacterIdRoute: typeof CharacterIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsernameRoute: UsernameRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LayoutRoute: LayoutRoute,
  AboutRoute: AboutRoute,
  SearchRoute: SearchRoute,
  authLoginRoute: authLoginRoute,
  authLogoutRoute: authLogoutRoute,
  authRegisterRoute: authRegisterRoute,
  CharacterIdRoute: CharacterIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$username",
        "/_authenticated",
        "/_layout",
        "/about",
        "/search",
        "/(auth)/login",
        "/(auth)/logout",
        "/(auth)/register",
        "/character/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$username": {
      "filePath": "$username.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/create",
        "/_authenticated/settings",
        "/_authenticated/sliders",
        "/_authenticated/character/$id/edit"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/logout": {
      "filePath": "(auth)/logout.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/_authenticated/create": {
      "filePath": "_authenticated/create.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/sliders": {
      "filePath": "_authenticated/sliders.tsx",
      "parent": "/_authenticated"
    },
    "/character/$id": {
      "filePath": "character/$id.tsx"
    },
    "/_authenticated/character/$id/edit": {
      "filePath": "_authenticated/character/$id/edit.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
